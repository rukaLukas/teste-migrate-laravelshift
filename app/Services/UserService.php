<?php

namespace App\Services;

use App\Helper\AuthHelper;
use App\Helper\Number;
use Carbon\Carbon;
use App\Models\User;
use App\Models\Accession;
use App\Models\Occupation;
use App\Mail\User\Register;
use Illuminate\Http\Request;
use Illuminate\Http\UploadedFile;
use App\Abstracts\AbstractService;
use Illuminate\Support\Arr;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Mail;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Storage;
use App\Infra\Repository\UserRepository;
use App\Services\Configuration\GroupService;
use Illuminate\Database\Eloquent\Collection;
use App\Services\Configuration\SubGroupService;
use App\Services\Configuration\UnderSubGroupService;
use App\Interfaces\Repository\UserRepositoryInterface;
use Illuminate\Validation\Rules\Exists;

class UserService extends AbstractService
{
    /**
     * @var UserRepositoryInterface
     */
    protected $repository;

    /**
     * @var PronounService
     */
    protected $pronounService;

    /**
     * @var OccupationService
     */
    protected $occupationService;


    public function __construct(
        UserRepository $repository,
        PronounService $pronounService,
        OccupationService $occupationService,
    )
    {
        $this->repository = $repository;
        $this->pronounService = $pronounService;
        $this->occupationService = $occupationService;
    }

    public function getPaginationList(array $params)
    {
        $user = $this->find(Auth::user()->getAuthIdentifier());
        if ($user->county_id && $user->occupation_id !== Occupation::GESTOR_NACIONAL) {
            $params['county_id'] = $user->county_id;
        }
        return parent::getPaginationList($params);
    }

    /**
     * @param Request $request
     * @param mixed $model
     */
    public function afterSave(Request $request, mixed $model): void
    {
        $hasUserLogged = $request->user();
        if ($hasUserLogged) {
            $this->sendEmailToNewUserRegister($model);
        }
    }

    public function afterUpdate(Request $request, mixed $model): void
    {
        $groupService = app()->make(GroupService::class);
        $params = $request->all();

        $params['checkboxUsers'] = [
            ['id' => $params['id']]
        ];

        if (isset($params['group'])) {
            $groupService->insertUsers($params);
        }
    }

    /**
     * @param User $user
     */
    private function sendEmailToNewUserRegister(User $user)
    {
        Mail::to($user)->send(
            new Register($user)
        );
    }

    /**
     * @throws \Illuminate\Contracts\Container\BindingResolutionException
     */
    private function checkIfCanUserOccupationGestorNacional(array $params)
    {
        $occupation = $this->occupationService->find($params['occupation']);
        if ($occupation->id === Occupation::GESTOR_NACIONAL ||
            $occupation->id === Occupation::PREFEITO ||
            $occupation->id === Occupation::GESTOR_POLITICO
        ) {
            $userLogged = AuthHelper::userLoogged();
            if ($userLogged && $userLogged->occupation_id !== Occupation::GESTOR_NACIONAL) {
                throw new \Exception(
                    'Você não pode adicionar esse perfil.'
                );
            }
        }
    }

    public function formatBirthdate($params)
    {
        return Carbon::create(Arr::get($params, 'birthdate'))->format('Y-m-d');
    }

    /**
     * @param Request $request
     * @return array
     * @throws \Illuminate\Contracts\Container\BindingResolutionException
     */
    public function beforeSave(Request $request): array
    {
        $params = $request->all();

        $this->checkIfCanUserOccupationGestorNacional($params);

        $params['birthdate'] = $this->formatBirthdate($params);
        $params['occupation_id'] = $this->occupationService->find($params['occupation'])->id;
        $params['pronoun_id'] = $this->pronounService->find($params['pronoun'])->id;

        return $params;
    }

    /**
     * @throws \Exception
     */
    public function beforeUpdate(Request $request, int|string $id, string $validationName = null): array
    {
        $params = parent::beforeUpdate($request, $id, $validationName); // TODO: Change the autogenerated stub
        unset($params['group']);
        unset($params['subGroup']);
        unset($params['underSubGroup']);

        $this->checkIfCanUserOccupationGestorNacional($params);

        $params['birthdate'] = $this->formatBirthdate($params);
        $params['occupation_id'] = $this->occupationService->find($params['occupation'])->id;
        $params['pronoun_id'] = $this->pronounService->find($params['pronoun'])->id;

        // $this->validateIfCPFAlreadyExistsOnUpdate($params['cpf'], $params['id'])
        //     ->validateIfEmailAlreadyExistsOnUpdate($params['email'], $params['id']);

        return $params;
    }

    /**
     * @param string $cpf
     * @param string $id
     * @return $this
     * @throws \Exception
     */
    private function validateIfCPFAlreadyExistsOnUpdate(string $cpf, string $id)
    {
        $user = $this->find($id);
        $existUser = !!User::where('cpf', Number::getOnlyNumber($cpf))
            ->whereNotIn('id', [$user->id])
            ->count();
        
        if (true === $existUser) {
            throw new \Exception('CPF já existe para um outro usuário');
        }
        return $this;
    }

    /**
     * @param string $email
     * @param string $id
     * @return $this
     * @throws \Exception
     */
    private function validateIfEmailAlreadyExistsOnUpdate(string $email, string $id)
    {
        $user = $this->find($id);
        $existUser = !!User::where('email', $email)
            ->whereNotIn('id', [$user->id])
            ->count();

        if (true === $existUser) {
            throw new \Exception('E-mail já existe para um outro usuário');
        }
        return $this;
    }

    /**
     * @return mixed
     */
    public function preRequisite($id = null)
    {
        // TODO esconder prefeito do dropdown de novos usuarios
        $underSubGroupService = app()->make(UnderSubGroupService::class);
        $subGroupService = app()->make(SubGroupService::class);
        $groupService = app()->make(GroupService::class);
        $stateService = app()->make(StateService::class);

        $arr['occupations'] = generateSelectOption($this->occupationService->getRepository()->list());
        $arr['pronouns'] = generateSelectOption($this->pronounService->getRepository()->list());
        $arr['groups'] = generateSelectOption($groupService->getRepository()->list());
        $arr['subGroups'] = generateSelectOption($subGroupService->getRepository()->list());
        $arr['underSubGroups'] = generateSelectOption($underSubGroupService->getRepository()->list());
        $arr['states'] = generateSelectOption($stateService->getRepository()->list());

        return $arr;
    }

    public function find(int|string $id): ?Model
    {
        $user = parent::find($id);

        return is_null($user) ? null : $this->formatGroups($user);
    }

    public function findByCounty(int|string $id): ?Collection
    {
        $user = $this->repository->findByCounty($id);

        return is_null($user) ? null : $user; //$this->formatGroups($user);
    }

    /**
     * @param User $user
     * @return User|mixed|void
     * @throws \Illuminate\Contracts\Container\BindingResolutionException
     */
    public function formatGroups(User $user)
    {
        $group = '';
        $subGroup = '';
        $underSubGroup = '';

        $underSubGroupService = app()->make(UnderSubGroupService::class);
        $subGroupService = app()->make(SubGroupService::class);
        $groupService = app()->make(GroupService::class);

        if ($user->underSubGroup()->first()) {
            $underSubGroup = $underSubGroupService->find($user->underSubGroup()->first()->id);
            $subGroup = $subGroupService->find($underSubGroup->sub_group_id);
            $group = $groupService->find($subGroup->group_id);
            return $this->formatReturnGroup($user, $group, $subGroup, $underSubGroup);
        }

        if ($user->subGroup()->first()) {
            $subGroup = $subGroupService->find($user->subGroup()->first()->id);
            $group = $groupService->find($subGroup->group_id);
            return $this->formatReturnGroup($user, $group, $subGroup, $underSubGroup);
        }

        if ($user->group()->first()) {
            $group = $groupService->find($user->group()->first()->id);
            return $this->formatReturnGroup($user, $group, $subGroup, $underSubGroup);
        }

        return $user;
    }

    /**
     * @param $user
     * @param $group
     * @param $subGroup
     * @param $underSubGroup
     * @return mixed
     */
    private function formatReturnGroup($user, $group, $subGroup, $underSubGroup): User
    {
        $user->group = $group;
        $user->subGroup = $subGroup;
        $user->underSubGroup = $underSubGroup;
        return $user;
    }

    public function avatar(User $user, $params)
    {
        /**
         * @var $file UploadedFile
         */
        $file = $params['image'];
        Storage::disk('public')->put('images/users/' . $user->id, $file);
        $user->avatar = $file->hashName();
        $user->update();
        return $user;
    }

    /**
     * @param $userId
     * @param $params
     * @return Model
     * @throws \Exception
     */
    public function confirmExternal($userId, $params)
    {

        $user = $this->repository->find($userId);

        if (!$user) {
            throw new \Exception('Usuário não encontrado.');
        }

        if ($user->password) {
            throw new \Exception('Usuário já aceitou a adesão.');
        }

        $user->password = Hash::make($params['password']);
        $user->save();

        return $user;
    }

    /**
     * @param $userId
     * @throws \Exception
     */
    public function validateAlreadyMadeAccession($userId)
    {
        $user = $this->getRepository()->find($userId);

        if (!$user) {
            throw new \Exception('Usuário não encontrado.');
        }

        if ($user->password) {
            throw new \Exception('Usuário já aceitou a adesão.');
        }
    }

    public function resendMailAccession($userId)
    {
        $accessionService = app()->make(AccessionService::class);
        $accessionService->resendMailAccession($userId);
    }
}
